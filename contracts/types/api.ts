/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Prometheus Metrics
         * @description Prometheus-compatible metrics endpoint for monitoring and alerting
         */
        get: operations["metrics_endpoint_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List conditions
         * @description Get all conditions for the authenticated user
         */
        get: operations["list_conditions_conditions_get"];
        put?: never;
        /**
         * Create condition
         * @description Create a new medical condition for the authenticated user
         */
        post: operations["create_condition_conditions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/conditions/{condition_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get condition
         * @description Get a specific condition by ID
         */
        get: operations["get_condition_conditions__condition_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete condition
         * @description Delete (deactivate) a specific condition
         */
        delete: operations["delete_condition_conditions__condition_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update condition
         * @description Update a specific condition
         */
        patch: operations["update_condition_conditions__condition_id__patch"];
        trace?: never;
    };
    "/doctors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List doctors
         * @description Get all doctors for the authenticated user
         */
        get: operations["list_doctors_doctors_get"];
        put?: never;
        /**
         * Create doctor
         * @description Create a new doctor record for the authenticated user
         */
        post: operations["create_doctor_doctors_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doctors/{doctor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get doctor
         * @description Get a specific doctor by ID
         */
        get: operations["get_doctor_doctors__doctor_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete doctor
         * @description Delete (deactivate) a specific doctor
         */
        delete: operations["delete_doctor_doctors__doctor_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update doctor
         * @description Update a specific doctor
         */
        patch: operations["update_doctor_doctors__doctor_id__patch"];
        trace?: never;
    };
    "/doctors/link-condition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link doctor to condition
         * @description Create a link between a doctor and a condition
         */
        post: operations["link_doctor_to_condition_doctors_link_condition_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/doctors/{doctor_id}/conditions/{condition_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unlink doctor from condition
         * @description Remove the link between a doctor and a condition
         */
        delete: operations["unlink_doctor_from_condition_doctors__doctor_id__conditions__condition_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/passport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get medical passport
         * @description Get aggregated view of conditions with linked doctors (list of items)
         */
        get: operations["get_passport_passport_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List medications
         * @description Get paginated list of medications with optional search and filtering
         */
        get: operations["list_medications_medications__get"];
        put?: never;
        /**
         * Create new medication
         * @description Create a new medication in the master data list. Medication names must be unique.
         */
        post: operations["create_medication_medications__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medications/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active medications
         * @description Get all active medications for selection lists (no pagination)
         */
        get: operations["get_active_medications_medications_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medications/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search medications
         * @description Search medications by name or description
         */
        get: operations["search_medications_medications_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medications/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get medication statistics
         * @description Get statistics about medications in the system
         */
        get: operations["get_medication_stats_medications_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medications/{medication_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get medication by ID
         * @description Retrieve a specific medication by its ID
         */
        get: operations["get_medication_medications__medication_id__get"];
        /**
         * Update medication
         * @description Update an existing medication
         */
        put: operations["update_medication_medications__medication_id__put"];
        post?: never;
        /**
         * Delete medication
         * @description Permanently delete a medication (hard delete). Use with caution.
         */
        delete: operations["delete_medication_medications__medication_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/medications/{medication_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Deactivate medication
         * @description Deactivate a medication (soft delete). Deactivated medications won't appear in active lists.
         */
        patch: operations["deactivate_medication_medications__medication_id__deactivate_patch"];
        trace?: never;
    };
    "/medications/{medication_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Reactivate medication
         * @description Reactivate a previously deactivated medication
         */
        patch: operations["reactivate_medication_medications__medication_id__activate_patch"];
        trace?: never;
    };
    "/medications/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate medication name
         * @description Validate if a medication name exists and is optionally active
         */
        post: operations["validate_medication_name_medications_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/medications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Medication Logs Minimal */
        get: operations["list_medication_logs_minimal_logs_medications_get"];
        put?: never;
        /** Create Medication Log Minimal */
        post: operations["create_medication_log_minimal_logs_medications_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/medications/{log_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Medication Log Minimal */
        get: operations["get_medication_log_minimal_logs_medications__log_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/symptoms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Symptom Logs Minimal */
        get: operations["list_symptom_logs_minimal_logs_symptoms_get"];
        put?: never;
        /** Create Symptom Log Minimal */
        post: operations["create_symptom_log_minimal_logs_symptoms_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/logs/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logs Summary Minimal */
        get: operations["logs_summary_minimal_logs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Login */
        post: operations["login_auth_login_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/logout": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Logout
         * @description Logout current session.
         *
         *     session_id may be injected by middleware into endpoint dependencies (e.g. request.state).
         *     For now we accept a direct parameter for simplified flow.
         */
        post: operations["logout_auth_logout_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Register */
        post: operations["register_auth_register_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/session": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Session Status */
        get: operations["session_status_auth_session_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/demo": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Start Demo */
        post: operations["start_demo_auth_demo_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Health Check
         * @description Health check endpoint for service monitoring.
         *
         *     Returns:
         *         HealthCheckResponse: Service health status
         */
        get: operations["health_check_api_v1_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/ready": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Readiness Check
         * @description Kubernetes readiness probe endpoint.
         *
         *     Returns:
         *         Dict: Readiness status
         */
        get: operations["readiness_check_api_v1_health_ready_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/health/live": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Liveness Check
         * @description Kubernetes liveness probe endpoint.
         *
         *     Returns:
         *         Dict: Liveness status
         */
        get: operations["liveness_check_api_v1_health_live_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/metrics": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Metrics
         * @description Basic metrics endpoint without external psutil dependency.
         *
         *     Tests only assert presence of top-level keys and (optionally) some system
         *     metrics. We'll attempt psutil import; if unavailable, we gracefully fall
         *     back to a minimal payload so the endpoint never raises ModuleNotFoundError.
         */
        get: operations["metrics_api_v1_metrics_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/info": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Api Info
         * @description Get API information and configuration.
         *
         *     Returns basic information about the API for discovery purposes.
         *
         *     Returns:
         *         Dict: API information
         */
        get: operations["api_info_api_v1_info_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logs/medications": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Medication Logs Minimal */
        get: operations["list_medication_logs_minimal_api_v1_logs_medications_get"];
        put?: never;
        /** Create Medication Log Minimal */
        post: operations["create_medication_log_minimal_api_v1_logs_medications_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logs/medications/{log_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Medication Log Minimal */
        get: operations["get_medication_log_minimal_api_v1_logs_medications__log_id__get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logs/symptoms": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** List Symptom Logs Minimal */
        get: operations["list_symptom_logs_minimal_api_v1_logs_symptoms_get"];
        put?: never;
        /** Create Symptom Log Minimal */
        post: operations["create_symptom_log_minimal_api_v1_logs_symptoms_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/logs/summary": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Logs Summary Minimal */
        get: operations["logs_summary_minimal_api_v1_logs_summary_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/users/me": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /** Get Current User Placeholder */
        get: operations["get_current_user_placeholder_api_v1_users_me_get"];
        /** Update Current User Placeholder */
        put: operations["update_current_user_placeholder_api_v1_users_me_put"];
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medications/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List medications
         * @description Get paginated list of medications with optional search and filtering
         */
        get: operations["list_medications_api_v1_medications__get"];
        put?: never;
        /**
         * Create new medication
         * @description Create a new medication in the master data list. Medication names must be unique.
         */
        post: operations["create_medication_api_v1_medications__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medications/active": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get active medications
         * @description Get all active medications for selection lists (no pagination)
         */
        get: operations["get_active_medications_api_v1_medications_active_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medications/search": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Search medications
         * @description Search medications by name or description
         */
        get: operations["search_medications_api_v1_medications_search_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medications/stats": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get medication statistics
         * @description Get statistics about medications in the system
         */
        get: operations["get_medication_stats_api_v1_medications_stats_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medications/{medication_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get medication by ID
         * @description Retrieve a specific medication by its ID
         */
        get: operations["get_medication_api_v1_medications__medication_id__get"];
        /**
         * Update medication
         * @description Update an existing medication
         */
        put: operations["update_medication_api_v1_medications__medication_id__put"];
        post?: never;
        /**
         * Delete medication
         * @description Permanently delete a medication (hard delete). Use with caution.
         */
        delete: operations["delete_medication_api_v1_medications__medication_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/medications/{medication_id}/deactivate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Deactivate medication
         * @description Deactivate a medication (soft delete). Deactivated medications won't appear in active lists.
         */
        patch: operations["deactivate_medication_api_v1_medications__medication_id__deactivate_patch"];
        trace?: never;
    };
    "/api/v1/medications/{medication_id}/activate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        /**
         * Reactivate medication
         * @description Reactivate a previously deactivated medication
         */
        patch: operations["reactivate_medication_api_v1_medications__medication_id__activate_patch"];
        trace?: never;
    };
    "/api/v1/medications/validate": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Validate medication name
         * @description Validate if a medication name exists and is optionally active
         */
        post: operations["validate_medication_name_api_v1_medications_validate_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/symptoms/": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List Symptom Logs
         * @description List user symptom logs - placeholder.
         */
        get: operations["list_symptom_logs_api_v1_symptoms__get"];
        put?: never;
        /**
         * Create Symptom Log
         * @description Create new symptom log - placeholder.
         */
        post: operations["create_symptom_log_api_v1_symptoms__post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feel-vs-yesterday": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Feel vs yesterday analysis
         * @description Analyze how the user feels today compared to yesterday based on medication and symptom logs
         */
        get: operations["feel_vs_yesterday_api_v1_feel_vs_yesterday_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feel-vs-yesterday/history": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Feel vs yesterday history
         * @description Get feel vs yesterday analysis for multiple days
         */
        get: operations["feel_vs_yesterday_history_api_v1_feel_vs_yesterday_history_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/feel-vs-yesterday/health": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Feel service health check
         * @description Check if the feel vs yesterday service is working correctly
         */
        get: operations["feel_service_health_check_api_v1_feel_vs_yesterday_health_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/conditions": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List conditions
         * @description Get all conditions for the authenticated user
         */
        get: operations["list_conditions_api_v1_conditions_get"];
        put?: never;
        /**
         * Create condition
         * @description Create a new medical condition for the authenticated user
         */
        post: operations["create_condition_api_v1_conditions_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/conditions/{condition_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get condition
         * @description Get a specific condition by ID
         */
        get: operations["get_condition_api_v1_conditions__condition_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete condition
         * @description Delete (deactivate) a specific condition
         */
        delete: operations["delete_condition_api_v1_conditions__condition_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update condition
         * @description Update a specific condition
         */
        patch: operations["update_condition_api_v1_conditions__condition_id__patch"];
        trace?: never;
    };
    "/api/v1/doctors": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * List doctors
         * @description Get all doctors for the authenticated user
         */
        get: operations["list_doctors_api_v1_doctors_get"];
        put?: never;
        /**
         * Create doctor
         * @description Create a new doctor record for the authenticated user
         */
        post: operations["create_doctor_api_v1_doctors_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/doctors/{doctor_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get doctor
         * @description Get a specific doctor by ID
         */
        get: operations["get_doctor_api_v1_doctors__doctor_id__get"];
        put?: never;
        post?: never;
        /**
         * Delete doctor
         * @description Delete (deactivate) a specific doctor
         */
        delete: operations["delete_doctor_api_v1_doctors__doctor_id__delete"];
        options?: never;
        head?: never;
        /**
         * Update doctor
         * @description Update a specific doctor
         */
        patch: operations["update_doctor_api_v1_doctors__doctor_id__patch"];
        trace?: never;
    };
    "/api/v1/doctors/link-condition": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /**
         * Link doctor to condition
         * @description Create a link between a doctor and a condition
         */
        post: operations["link_doctor_to_condition_api_v1_doctors_link_condition_post"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/doctors/{doctor_id}/conditions/{condition_id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post?: never;
        /**
         * Unlink doctor from condition
         * @description Remove the link between a doctor and a condition
         */
        delete: operations["unlink_doctor_from_condition_api_v1_doctors__doctor_id__conditions__condition_id__delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/api/v1/passport": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        /**
         * Get medical passport
         * @description Get aggregated view of conditions with linked doctors (list of items)
         */
        get: operations["get_passport_api_v1_passport_get"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        /**
         * ConditionCreate
         * @description Schema for creating a new condition.
         */
        ConditionCreate: {
            /**
             * Name
             * @description Condition name
             * @example Hypertension
             */
            name: string;
            /**
             * Description
             * @description Optional condition description
             * @example High blood pressure requiring regular monitoring
             */
            description?: string | null;
            /**
             * Is Active
             * @description Whether the condition is active and being tracked
             * @default true
             * @example true
             */
            is_active: boolean;
        };
        /**
         * ConditionResponse
         * @description Schema for condition API responses.
         */
        ConditionResponse: {
            /**
             * Name
             * @description Condition name
             * @example Hypertension
             */
            name: string;
            /**
             * Description
             * @description Optional condition description
             * @example High blood pressure requiring regular monitoring
             */
            description?: string | null;
            /**
             * Is Active
             * @description Whether the condition is active and being tracked
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * Id
             * @description Unique condition identifier
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * User Id
             * @description ID of the user who owns this condition
             * @example user-uuid-123
             */
            user_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when condition was created
             * @example 2024-01-15T10:30:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Timestamp when condition was last updated
             * @example 2024-01-15T10:30:00Z
             */
            updated_at: string;
        };
        /**
         * ConditionUpdate
         * @description Schema for updating an existing condition.
         */
        ConditionUpdate: {
            /**
             * Name
             * @description Updated condition name
             * @example Hypertension
             */
            name?: string | null;
            /**
             * Description
             * @description Updated condition description
             * @example High blood pressure requiring regular monitoring
             */
            description?: string | null;
            /**
             * Is Active
             * @description Whether the condition is active and being tracked
             * @example true
             */
            is_active?: boolean | null;
        };
        /** DemoResponse */
        DemoResponse: {
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: {
                [key: string]: unknown;
            } | null;
        };
        /**
         * DoctorConditionLinkCreate
         * @description Schema for linking a doctor to a condition.
         */
        DoctorConditionLinkCreate: {
            /**
             * Doctor Id
             * @description Doctor identifier to link
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            doctor_id: string;
            /**
             * Condition Id
             * @description Condition identifier to link
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            condition_id: string;
        };
        /**
         * DoctorConditionLinkResponse
         * @description Schema for doctor-condition link responses.
         */
        DoctorConditionLinkResponse: {
            /**
             * Doctor Id
             * @description Doctor identifier
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            doctor_id: string;
            /**
             * Condition Id
             * @description Condition identifier
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            condition_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when link was created
             * @example 2024-01-15T10:30:00Z
             */
            created_at: string;
        };
        /**
         * DoctorCreate
         * @description Schema for creating a new doctor.
         */
        DoctorCreate: {
            /**
             * Name
             * @description Doctor's full name
             * @example Dr. Sarah Johnson
             */
            name: string;
            /**
             * Specialty
             * @description Doctor's medical specialty
             * @example Cardiology
             */
            specialty: string;
            /**
             * Contact Info
             * @description Doctor's contact information (email, phone, etc.)
             * @example sarah.johnson@heartcenter.com
             */
            contact_info?: string | null;
            /**
             * Is Active
             * @description Whether the doctor is active in practice
             * @default true
             * @example true
             */
            is_active: boolean;
        };
        /**
         * DoctorResponse
         * @description Schema for doctor API responses.
         */
        DoctorResponse: {
            /**
             * Name
             * @description Doctor's full name
             * @example Dr. Sarah Johnson
             */
            name: string;
            /**
             * Specialty
             * @description Doctor's medical specialty
             * @example Cardiology
             */
            specialty: string;
            /**
             * Contact Info
             * @description Doctor's contact information (email, phone, etc.)
             * @example sarah.johnson@heartcenter.com
             */
            contact_info?: string | null;
            /**
             * Is Active
             * @description Whether the doctor is active in practice
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * Id
             * @description Unique doctor identifier
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            id: string;
            /**
             * User Id
             * @description ID of the user who owns this doctor record
             * @example user-uuid-123
             */
            user_id: string;
            /**
             * Created At
             * Format: date-time
             * @description Timestamp when doctor was created
             * @example 2024-01-15T10:30:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description Timestamp when doctor was last updated
             * @example 2024-01-15T10:30:00Z
             */
            updated_at: string;
        };
        /**
         * DoctorUpdate
         * @description Schema for updating an existing doctor.
         */
        DoctorUpdate: {
            /**
             * Name
             * @description Updated doctor name
             * @example Dr. Sarah Johnson
             */
            name?: string | null;
            /**
             * Specialty
             * @description Updated specialty
             * @example Cardiology
             */
            specialty?: string | null;
            /**
             * Contact Info
             * @description Updated contact information
             * @example sarah.johnson@heartcenter.com
             */
            contact_info?: string | null;
            /**
             * Is Active
             * @description Whether the doctor is active in practice
             * @example true
             */
            is_active?: boolean | null;
        };
        /**
         * ErrorResponse
         * @description Standard error response schema.
         */
        ErrorResponse: {
            /**
             * Detail
             * @description Error description
             */
            detail: string;
            /**
             * Error Code
             * @description Optional error code
             */
            error_code?: string | null;
        };
        /**
         * FeelVsYesterdayResponse
         * @description Schema for feel vs yesterday comparison.
         * @example {
         *       "confidence": 0.75,
         *       "date_compared": "2025-10-15",
         *       "details": {
         *         "medication_effectiveness_change": 0.3,
         *         "symptom_count_change": -1,
         *         "symptom_severity_change": -0.5
         *       },
         *       "status": "better",
         *       "summary": "Feeling better today - fewer symptoms and medications were more effective"
         *     }
         */
        FeelVsYesterdayResponse: {
            /**
             * Status
             * @description Overall feeling status: 'better', 'same', 'worse', 'unknown'
             */
            status: string;
            /**
             * Confidence
             * @description Confidence score for the status (0.0 to 1.0)
             */
            confidence: number;
            /**
             * Summary
             * @description Human-readable summary of the comparison
             */
            summary: string;
            /**
             * Details
             * @description Detailed breakdown of the analysis
             */
            details?: {
                [key: string]: unknown;
            };
            /**
             * Date Compared
             * @description Date being compared (YYYY-MM-DD format)
             */
            date_compared: string;
        };
        /** HTTPValidationError */
        HTTPValidationError: {
            /** Detail */
            detail?: components["schemas"]["ValidationError"][];
        };
        /**
         * HealthCheckResponse
         * @description Response schema for health check endpoints.
         */
        HealthCheckResponse: {
            /**
             * Status
             * @description Service status
             * @example healthy
             */
            status: string;
            /**
             * Timestamp
             * Format: date-time
             * @description Health check timestamp
             * @example 2023-12-01T10:00:00Z
             */
            timestamp: string;
            /**
             * Version
             * @description Application version
             * @example 1.0.0
             */
            version: string;
            /**
             * Database
             * @description Database connectivity status
             * @example true
             */
            database: boolean;
        };
        /** LoginRequest */
        LoginRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
        };
        /**
         * MedicationCreate
         * @description Schema for creating a new medication.
         */
        MedicationCreate: {
            /**
             * Name
             * @description Medication name (must be unique)
             * @example Aspirin
             */
            name: string;
            /**
             * Description
             * @description Optional medication description
             * @example Pain reliever and anti-inflammatory medication
             */
            description?: string | null;
            /**
             * Is Active
             * @description Whether the medication is active (defaults to True for new medications)
             * @default true
             */
            is_active: boolean;
        };
        /**
         * MedicationListResponse
         * @description Response schema for paginated medication list.
         */
        MedicationListResponse: {
            /**
             * Items
             * @description List of medications
             * @example []
             */
            items: components["schemas"]["MedicationResponse"][];
            /**
             * Total
             * @description Total number of medications matching filters
             * @example 10
             */
            total: number;
            /**
             * Page
             * @description Current page number
             * @example 1
             */
            page: number;
            /**
             * Per Page
             * @description Number of items per page
             * @example 10
             */
            per_page: number;
            /**
             * Pages
             * @description Total number of pages
             * @example 1
             */
            pages: number;
        };
        /** MedicationLogCreateMinimal */
        MedicationLogCreateMinimal: {
            /** Medication Name */
            medication_name: string;
            /**
             * Dosage
             * @description Dosage string e.g. '200mg'
             */
            dosage?: string | null;
            /**
             * Taken At
             * @description Time medication taken
             */
            taken_at?: string | null;
            /** Notes */
            notes?: string | null;
            /** Effectiveness Rating */
            effectiveness_rating?: number | null;
        };
        /** MedicationLogResponseMinimal */
        MedicationLogResponseMinimal: {
            /** Id */
            id: number;
            /** User Id */
            user_id: string;
            /** Medication Name */
            medication_name: string;
            /** Dosage */
            dosage?: string | null;
            /** Taken At */
            taken_at?: string | null;
            /** Notes */
            notes?: string | null;
            /** Effectiveness Rating */
            effectiveness_rating?: number | null;
            /**
             * Logged At
             * Format: date-time
             */
            logged_at: string;
        };
        /**
         * MedicationPublic
         * @description Public medication schema (excludes audit fields).
         */
        MedicationPublic: {
            /**
             * Id
             * @description Unique medication identifier
             * @example 1
             */
            id: number;
            /**
             * Name
             * @description Medication name
             * @example Aspirin
             */
            name: string;
            /**
             * Description
             * @description Medication description
             * @example Pain reliever and anti-inflammatory medication
             */
            description: string | null;
            /**
             * Is Active
             * @description Whether medication is active
             * @example true
             */
            is_active: boolean;
        };
        /**
         * MedicationResponse
         * @description Schema for medication response with all fields.
         */
        MedicationResponse: {
            /**
             * Name
             * @description Medication name (must be unique)
             * @example Aspirin
             */
            name: string;
            /**
             * Description
             * @description Optional medication description
             * @example Pain reliever and anti-inflammatory medication
             */
            description?: string | null;
            /**
             * Is Active
             * @description Whether the medication is active and available for logging
             * @default true
             * @example true
             */
            is_active: boolean;
            /**
             * Id
             * @description Unique medication identifier
             * @example 1
             */
            id: number;
            /**
             * Created At
             * Format: date-time
             * @description When the medication was created
             * @example 2023-01-01T10:00:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description When the medication was last updated
             * @example 2023-01-01T10:00:00Z
             */
            updated_at: string;
        };
        /**
         * MedicationUpdate
         * @description Schema for updating an existing medication.
         */
        MedicationUpdate: {
            /**
             * Name
             * @description Updated medication name
             */
            name?: string | null;
            /**
             * Description
             * @description Updated medication description
             */
            description?: string | null;
            /**
             * Is Active
             * @description Updated active status
             */
            is_active?: boolean | null;
        };
        /**
         * PassportConditionItem
         * @description Schema for a condition item in the passport response.
         */
        PassportConditionItem: {
            /**
             * Id
             * @description Condition identifier
             * @example 550e8400-e29b-41d4-a716-446655440000
             */
            id: string;
            /**
             * Name
             * @description Condition name
             * @example Hypertension
             */
            name: string;
            /**
             * Description
             * @description Condition description
             * @example High blood pressure requiring regular monitoring
             */
            description?: string | null;
            /**
             * Is Active
             * @description Whether the condition is active
             * @example true
             */
            is_active: boolean;
            /**
             * Created At
             * Format: date-time
             * @description When the condition was created
             * @example 2024-01-15T10:30:00Z
             */
            created_at: string;
            /**
             * Updated At
             * Format: date-time
             * @description When the condition was last updated
             * @example 2024-01-15T10:30:00Z
             */
            updated_at: string;
        };
        /**
         * PassportDoctorItem
         * @description Schema for a doctor item in the passport response.
         */
        PassportDoctorItem: {
            /**
             * Id
             * @description Doctor identifier
             * @example 550e8400-e29b-41d4-a716-446655440001
             */
            id: string;
            /**
             * Name
             * @description Doctor name
             * @example Dr. Sarah Johnson
             */
            name: string;
            /**
             * Specialty
             * @description Doctor specialty
             * @example Cardiology
             */
            specialty: string;
            /**
             * Contact Info
             * @description Doctor contact information
             * @example sarah.johnson@heartcenter.com
             */
            contact_info?: string | null;
            /**
             * Is Active
             * @description Whether the doctor is active
             * @example true
             */
            is_active: boolean;
        };
        /**
         * PassportItem
         * @description Schema for a passport item containing condition and linked doctors.
         */
        PassportItem: {
            /** @description The medical condition */
            condition: components["schemas"]["PassportConditionItem"];
            /**
             * Doctors
             * @description List of doctors linked to this condition
             * @example []
             */
            doctors: components["schemas"]["PassportDoctorItem"][];
        };
        /** RegisterRequest */
        RegisterRequest: {
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Password */
            password: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
        };
        /** SessionStatusResponse */
        SessionStatusResponse: {
            /** Data */
            data?: {
                [key: string]: unknown;
            } | null;
            /** Error */
            error?: {
                [key: string]: unknown;
            } | null;
        };
        /** SymptomLogCreateMinimal */
        SymptomLogCreateMinimal: {
            /** Symptom Name */
            symptom_name: string;
            /**
             * Severity
             * @description Severity level: one of none|mild|moderate|severe|critical (case-insensitive)
             */
            severity: string;
            /** Started At */
            started_at?: string | null;
            /** Duration Minutes */
            duration_minutes?: number | null;
            /** Location */
            location?: string | null;
            /** Impact Rating */
            impact_rating?: number | null;
            /** Notes */
            notes?: string | null;
        };
        /** SymptomLogResponseMinimal */
        SymptomLogResponseMinimal: {
            /** Id */
            id: number;
            /** User Id */
            user_id: string;
            /** Symptom Name */
            symptom_name: string;
            /** Severity */
            severity: string;
            /** Started At */
            started_at?: string | null;
            /** Duration Minutes */
            duration_minutes?: number | null;
            /** Location */
            location?: string | null;
            /** Impact Rating */
            impact_rating?: number | null;
            /** Notes */
            notes?: string | null;
            /**
             * Logged At
             * Format: date-time
             */
            logged_at: string;
        };
        /** ValidationError */
        ValidationError: {
            /** Location */
            loc: (string | number)[];
            /** Message */
            msg: string;
            /** Error Type */
            type: string;
        };
        /**
         * ValidationErrorResponse
         * @description Validation error response schema.
         */
        ValidationErrorResponse: {
            /**
             * Detail
             * @description List of validation errors
             */
            detail: {
                [key: string]: unknown;
            }[];
        };
        /** UserPublic */
        app__api__auth__login__UserPublic: {
            /** Id */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** Display Name */
            display_name?: string | null;
        };
        /** UserResponse */
        app__api__auth__login__UserResponse: {
            data?: components["schemas"]["app__api__auth__login__UserPublic"] | null;
            /** Error */
            error?: {
                [key: string]: unknown;
            } | null;
        };
        /** UserPublic */
        app__api__auth__register__UserPublic: {
            /** Id */
            id: string;
            /**
             * Email
             * Format: email
             */
            email: string;
            /** First Name */
            first_name?: string | null;
            /** Last Name */
            last_name?: string | null;
        };
        /** UserResponse */
        app__api__auth__register__UserResponse: {
            data?: components["schemas"]["app__api__auth__register__UserPublic"] | null;
            /** Error */
            error?: {
                [key: string]: unknown;
            } | null;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    metrics_endpoint_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    list_conditions_conditions_get: {
        parameters: {
            query?: {
                /** @description Only return active conditions */
                active_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_condition_conditions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_condition_conditions__condition_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_condition_conditions__condition_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_condition_conditions__condition_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_doctors_doctors_get: {
        parameters: {
            query?: {
                /** @description Only return active doctors */
                active_only?: boolean;
                /** @description Filter by specialty */
                specialty?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_doctor_doctors_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_doctor_doctors__doctor_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_doctor_doctors__doctor_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_doctor_doctors__doctor_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    link_doctor_to_condition_doctors_link_condition_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorConditionLinkCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorConditionLinkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlink_doctor_from_condition_doctors__doctor_id__conditions__condition_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_passport_passport_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PassportItem"][];
                };
            };
        };
    };
    list_medications_medications__get: {
        parameters: {
            query?: {
                /** @description Search term for medication name or description */
                search?: string | null;
                /** @description Filter to only active medications */
                active_only?: boolean;
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page (1-100) */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of medications retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationListResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_medication_medications__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicationCreate"];
            };
        };
        responses: {
            /** @description Medication created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication name already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_active_medications_medications_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Active medications retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationPublic"][];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    search_medications_medications_search_get: {
        parameters: {
            query: {
                /** @description Search query */
                q: string;
                /** @description Include only active medications */
                active_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationPublic"][];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_medication_stats_medications_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_medication_medications__medication_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_medication_medications__medication_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicationUpdate"];
            };
        };
        responses: {
            /** @description Medication updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication name already exists or validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_medication_medications__medication_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete medication (referenced by logs) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deactivate_medication_medications__medication_id__deactivate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication deactivated successfully (returns full medication) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication already deactivated */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    reactivate_medication_medications__medication_id__activate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication reactivated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    validate_medication_name_medications_validate_post: {
        parameters: {
            query: {
                /** @description Medication name to validate */
                name: string;
                /** @description Check only active medications */
                active_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_medication_logs_minimal_logs_medications_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                start_date?: string | null;
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationLogResponseMinimal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_medication_log_minimal_logs_medications_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicationLogCreateMinimal"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationLogResponseMinimal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_medication_log_minimal_logs_medications__log_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                log_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationLogResponseMinimal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_symptom_logs_minimal_logs_symptoms_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SymptomLogResponseMinimal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_symptom_log_minimal_logs_symptoms_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SymptomLogCreateMinimal"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SymptomLogResponseMinimal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logs_summary_minimal_logs_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    login_auth_login_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__api__auth__login__UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logout_auth_logout_post: {
        parameters: {
            query?: {
                session_id?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    register_auth_register_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterRequest"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["app__api__auth__register__UserResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    session_status_auth_session_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SessionStatusResponse"];
                };
            };
        };
    };
    start_demo_auth_demo_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DemoResponse"];
                };
            };
        };
    };
    health_check_api_v1_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HealthCheckResponse"];
                };
            };
        };
    };
    readiness_check_api_v1_health_ready_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    liveness_check_api_v1_health_live_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    metrics_api_v1_metrics_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    api_info_api_v1_info_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    list_medication_logs_minimal_api_v1_logs_medications_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
                start_date?: string | null;
                end_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationLogResponseMinimal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_medication_log_minimal_api_v1_logs_medications_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicationLogCreateMinimal"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationLogResponseMinimal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_medication_log_minimal_api_v1_logs_medications__log_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                log_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationLogResponseMinimal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_symptom_logs_minimal_api_v1_logs_symptoms_get: {
        parameters: {
            query?: {
                limit?: number;
                offset?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SymptomLogResponseMinimal"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_symptom_log_minimal_api_v1_logs_symptoms_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["SymptomLogCreateMinimal"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["SymptomLogResponseMinimal"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    logs_summary_minimal_api_v1_logs_summary_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    get_current_user_placeholder_api_v1_users_me_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    update_current_user_placeholder_api_v1_users_me_put: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    list_medications_api_v1_medications__get: {
        parameters: {
            query?: {
                /** @description Search term for medication name or description */
                search?: string | null;
                /** @description Filter to only active medications */
                active_only?: boolean;
                /** @description Page number for pagination */
                page?: number;
                /** @description Number of items per page (1-100) */
                per_page?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description List of medications retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationListResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    create_medication_api_v1_medications__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicationCreate"];
            };
        };
        responses: {
            /** @description Medication created successfully */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication name already exists */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_active_medications_api_v1_medications_active_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Active medications retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationPublic"][];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    search_medications_api_v1_medications_search_get: {
        parameters: {
            query: {
                /** @description Search query */
                q: string;
                /** @description Include only active medications */
                active_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Search results retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationPublic"][];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_medication_stats_api_v1_medications_stats_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Statistics retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    get_medication_api_v1_medications__medication_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication retrieved successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    update_medication_api_v1_medications__medication_id__put: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["MedicationUpdate"];
            };
        };
        responses: {
            /** @description Medication updated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication name already exists or validation error */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    delete_medication_api_v1_medications__medication_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication deleted successfully */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Cannot delete medication (referenced by logs) */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    deactivate_medication_api_v1_medications__medication_id__deactivate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication deactivated successfully (returns full medication) */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication already deactivated */
            400: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    reactivate_medication_api_v1_medications__medication_id__activate_patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                medication_id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Medication reactivated successfully */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["MedicationResponse"];
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    validate_medication_name_api_v1_medications_validate_post: {
        parameters: {
            query: {
                /** @description Medication name to validate */
                name: string;
                /** @description Check only active medications */
                active_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Validation result */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
            /** @description Medication not found */
            404: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
            /** @description Validation error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ValidationErrorResponse"];
                };
            };
            /** @description Internal server error */
            500: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ErrorResponse"];
                };
            };
        };
    };
    list_symptom_logs_api_v1_symptoms__get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    create_symptom_log_api_v1_symptoms__post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": unknown;
                };
            };
        };
    };
    feel_vs_yesterday_api_v1_feel_vs_yesterday_get: {
        parameters: {
            query?: {
                /** @description Date to compare against (defaults to today). Format: YYYY-MM-DDTHH:MM:SS */
                target_date?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeelVsYesterdayResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    feel_vs_yesterday_history_api_v1_feel_vs_yesterday_history_get: {
        parameters: {
            query?: {
                /** @description Number of days to analyze (1-30) */
                days?: number;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["FeelVsYesterdayResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    feel_service_health_check_api_v1_feel_vs_yesterday_health_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        [key: string]: unknown;
                    };
                };
            };
        };
    };
    list_conditions_api_v1_conditions_get: {
        parameters: {
            query?: {
                /** @description Only return active conditions */
                active_only?: boolean;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_condition_api_v1_conditions_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_condition_api_v1_conditions__condition_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_condition_api_v1_conditions__condition_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_condition_api_v1_conditions__condition_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["ConditionUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["ConditionResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    list_doctors_api_v1_doctors_get: {
        parameters: {
            query?: {
                /** @description Only return active doctors */
                active_only?: boolean;
                /** @description Filter by specialty */
                specialty?: string | null;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"][];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    create_doctor_api_v1_doctors_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_doctor_api_v1_doctors__doctor_id__get: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    delete_doctor_api_v1_doctors__doctor_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    update_doctor_api_v1_doctors__doctor_id__patch: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorUpdate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    link_doctor_to_condition_api_v1_doctors_link_condition_post: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["DoctorConditionLinkCreate"];
            };
        };
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["DoctorConditionLinkResponse"];
                };
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    unlink_doctor_from_condition_api_v1_doctors__doctor_id__conditions__condition_id__delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                doctor_id: string;
                condition_id: string;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            204: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
            /** @description Validation Error */
            422: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["HTTPValidationError"];
                };
            };
        };
    };
    get_passport_api_v1_passport_get: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            /** @description Successful Response */
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["PassportItem"][];
                };
            };
        };
    };
}
