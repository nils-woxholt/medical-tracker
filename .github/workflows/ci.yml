name: CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Backend Jobs
  backend-lint:
    name: Backend Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run Ruff linter
        run: ruff check .
        
      - name: Run Ruff formatter check
        run: ruff format --check .
        
      - name: Run mypy type checker
        run: mypy .

  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./backend
    strategy:
      matrix:
        python-version: ['3.11', '3.12']
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
          
      - name: Cache pip dependencies
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-
            
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Run tests with coverage
        run: |
          pytest --cov=app --cov-report=xml --cov-report=html --cov-fail-under=80
          
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: backend-coverage
          path: ./backend/coverage.xml
          retention-days: 7

  # Frontend Jobs  
  frontend-lint:
    name: Frontend Lint & Type Check
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run ESLint
        run: npm run lint
        
      - name: Run TypeScript type check
        run: npm run type-check

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Run unit tests with coverage
        run: npm run test:coverage
        
      - name: Upload coverage reports to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./frontend/coverage/coverage-final.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true
          
      - name: Upload coverage artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-coverage
          path: ./frontend/coverage/
          retention-days: 7

  frontend-build:
    name: Frontend Build
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./frontend
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
          
      - name: Install dependencies
        run: npm ci
        
      - name: Build application
        run: npm run build
        
      - name: Analyze bundle size
        run: |
          # Create bundle size report
          npx @next/bundle-analyzer@latest
          
          # Check bundle sizes against limits
          echo "Checking bundle sizes..."
          FIRST_LOAD_JS=$(grep -o '"First Load JS shared by all":[^,]*' .next/analyze.json | grep -o '[0-9.]*')
          echo "First Load JS size: ${FIRST_LOAD_JS}kB"
          
          # Fail if first load JS exceeds 250kB
          if (( $(echo "${FIRST_LOAD_JS} > 250" | bc -l) )); then
            echo "❌ First Load JS size (${FIRST_LOAD_JS}kB) exceeds limit of 250kB"
            exit 1
          else
            echo "✅ First Load JS size (${FIRST_LOAD_JS}kB) is within limit"
          fi
        continue-on-error: false
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/.next
          retention-days: 7
          
      - name: Upload bundle analysis
        uses: actions/upload-artifact@v3
        with:
          name: bundle-analysis
          path: ./frontend/.next/analyze.json
          retention-days: 30

  # E2E Tests
  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-build]
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: './frontend/package-lock.json'
          
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install backend dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          
      - name: Install frontend dependencies
        run: |
          cd frontend
          npm ci
          npx playwright install --with-deps
          
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: ./frontend/.next
          
      - name: Start backend server
        run: |
          cd backend
          uvicorn app.main:app --host 0.0.0.0 --port 8000 &
          sleep 10
          curl -f http://localhost:8000/health || exit 1
        env:
          DATABASE_URL: sqlite:///test.db
          
      - name: Start frontend server
        run: |
          cd frontend
          npm run build
          npm start &
          sleep 10
          curl -f http://localhost:3000 || exit 1
          
      - name: Run Playwright E2E tests
        run: |
          cd frontend
          npm run e2e
          
      - name: Upload Playwright report
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: playwright-report
          path: ./frontend/playwright-report/
          retention-days: 30

  # Contract Validation
  contract-diff:
    name: OpenAPI Contract Diff
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for diff
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          
      - name: Install dependencies
        run: |
          cd backend
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install openapi-diff
          
      - name: Generate current OpenAPI spec
        run: |
          cd backend
          python -c "
          from app.main import app
          import json
          with open('openapi-current.json', 'w') as f:
              json.dump(app.openapi(), f, indent=2)
          "
          
      - name: Get base branch OpenAPI spec
        run: |
          git checkout ${{ github.event.pull_request.base.sha }}
          if [ -f "contracts/openapi.yaml" ]; then
            cp contracts/openapi.yaml openapi-base.yaml
          else
            echo "info: {title: 'SaaS Medical Tracker API', version: '0.1.0'}" > openapi-base.yaml
            echo "paths: {}" >> openapi-base.yaml
          fi
          git checkout ${{ github.event.pull_request.head.sha }}
          
      - name: Compare OpenAPI specs
        run: |
          echo "## 📋 OpenAPI Contract Changes" >> contract-diff.md
          echo "" >> contract-diff.md
          
          if [ -f "openapi-base.yaml" ]; then
            echo "**Base contract:** Found existing OpenAPI spec" >> contract-diff.md
          else
            echo "**Base contract:** No existing spec (new API)" >> contract-diff.md
          fi
          
          echo "**Current contract:** Generated from backend code" >> contract-diff.md
          echo "" >> contract-diff.md
          
          # Simple diff check (placeholder for more sophisticated tooling)
          if [ -f "openapi-base.yaml" ]; then
            echo "### Changes Detected:" >> contract-diff.md
            echo "\`\`\`diff" >> contract-diff.md
            diff -u openapi-base.yaml backend/openapi-current.json || echo "Differences found" >> contract-diff.md
            echo "\`\`\`" >> contract-diff.md
          else
            echo "### New API Contract" >> contract-diff.md
            echo "This appears to be a new API. Full contract review recommended." >> contract-diff.md
          fi
          
          echo "" >> contract-diff.md
          echo "**Note:** This is a placeholder implementation. Consider using tools like:" >> contract-diff.md
          echo "- \`openapi-diff\` for detailed breaking change analysis" >> contract-diff.md
          echo "- \`swagger-diff\` for comprehensive contract comparison" >> contract-diff.md
          echo "- Custom validation rules for your API standards" >> contract-diff.md
          
      - name: Upload contract diff report
        uses: actions/upload-artifact@v3
        with:
          name: contract-diff-report
          path: contract-diff.md
          retention-days: 30
          
      - name: Comment on PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'contract-diff.md';
            
            if (fs.existsSync(path)) {
              const body = fs.readFileSync(path, 'utf8');
              
              github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: body
              });
            }

  # Coverage Reporting & Quality Gates
  coverage-report:
    name: Coverage Report & Quality Gates
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Needed for coverage comparison
      
      - name: Download backend coverage
        uses: actions/download-artifact@v3
        with:
          name: backend-coverage
          path: ./backend-coverage
        continue-on-error: true
        
      - name: Download frontend coverage
        uses: actions/download-artifact@v3
        with:
          name: frontend-coverage  
          path: ./frontend-coverage
        continue-on-error: true
        
      - name: Generate coverage report
        run: |
          echo "# 📊 Coverage Report" > coverage-report.md
          echo "" >> coverage-report.md
          
          # Backend Coverage
          if [ -f "./backend-coverage/coverage.xml" ]; then
            BACKEND_COV=$(grep -o 'line-rate="[^"]*"' ./backend-coverage/coverage.xml | head -1 | cut -d'"' -f2)
            BACKEND_PERCENT=$(echo "scale=1; $BACKEND_COV * 100" | bc)
            echo "## Backend Coverage: ${BACKEND_PERCENT}% 🎯 80%" >> coverage-report.md
            echo "" >> coverage-report.md
            
            if (( $(echo "${BACKEND_PERCENT} >= 80" | bc -l) )); then
              echo "✅ Backend coverage meets threshold" >> coverage-report.md
            else
              echo "❌ Backend coverage below threshold (${BACKEND_PERCENT}% < 80%)" >> coverage-report.md
            fi
          else
            echo "⚠️ Backend coverage data not available" >> coverage-report.md
          fi
          
          echo "" >> coverage-report.md
          
          # Frontend Coverage
          if [ -f "./frontend-coverage/coverage-summary.json" ]; then
            FRONTEND_COV=$(cat ./frontend-coverage/coverage-summary.json | grep -o '"lines":{"pct":[^,]*' | cut -d':' -f3)
            echo "## Frontend Coverage: ${FRONTEND_COV}% 🎯 70%" >> coverage-report.md
            echo "" >> coverage-report.md
            
            if (( $(echo "${FRONTEND_COV} >= 70" | bc -l) )); then
              echo "✅ Frontend coverage meets threshold" >> coverage-report.md
            else
              echo "❌ Frontend coverage below threshold (${FRONTEND_COV}% < 70%)" >> coverage-report.md
            fi
          else
            echo "⚠️ Frontend coverage data not available" >> coverage-report.md
          fi
          
      - name: Upload coverage report
        uses: actions/upload-artifact@v3
        with:
          name: coverage-report
          path: coverage-report.md
          retention-days: 30
          
      - name: Comment coverage on PR
        uses: actions/github-script@v6
        with:
          script: |
            const fs = require('fs');
            const path = 'coverage-report.md';
            
            if (fs.existsSync(path)) {
              const body = fs.readFileSync(path, 'utf8');
              
              // Find existing coverage comment
              const comments = await github.rest.issues.listComments({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
              });
              
              const existingComment = comments.data.find(
                comment => comment.body.includes('📊 Coverage Report')
              );
              
              if (existingComment) {
                // Update existing comment
                await github.rest.issues.updateComment({
                  comment_id: existingComment.id,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              } else {
                // Create new comment
                await github.rest.issues.createComment({
                  issue_number: context.issue.number,
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  body: body
                });
              }
            }

  # Security & Quality Gates  
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
          
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # Deployment readiness check
  deployment-check:
    name: Deployment Check
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test, e2e-test]
    if: github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4
      
      - name: Check deployment readiness
        run: |
          echo "✅ All tests passed"
          echo "✅ Code quality checks passed"  
          echo "✅ Security scans completed"
          echo "🚀 Ready for deployment"